package com.Myexample.MyWebApp;import com.Myexample.MyWebApp.Entity.students;import com.Myexample.MyWebApp.Repository.UserRepository;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;import org.springframework.test.annotation.Rollback;import java.util.Optional;import static org.junit.jupiter.api.Assertions.assertEquals;@DataJpaTest@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)@Rollback(value = false)public class UserRepositoryTests {    @Autowired    public UserRepository repository;    @Test    public void testAddNew()    {        students student = new students();        student.setEmail("Anuraganand0903@gmial.com");        student.setPassword("Anurag123");        student.setFirstName("Anurag");        student.setLastName("Anand");        students savedStudent = repository.save(student);        Assertions.assertNotNull(savedStudent);        Assertions.assertNotEquals(0, savedStudent.getId());    }    @Test    public void testListAll()    {        Iterable<students> student = repository.findAll();        Assertions.assertNotNull(student);        for(students stu : student)        {            System.out.println(stu);        }    }    @Test    public void testUpdate()    {        Integer userId = 1;        Optional<students> byId = repository.findById(userId);        if(byId.isPresent()) {            students student = byId.get();            student.setPassword("98565");            repository.save(student);            students updatedUser = repository.findById(userId).get();            assertEquals("98565",updatedUser.getPassword());        }    }    @Test    public void testDelete()    {        Integer userId = 1;        repository.deleteById(userId);        Optional<students> byId = repository.findById(userId);        Assertions.assertEquals(false, byId.isPresent());    }}